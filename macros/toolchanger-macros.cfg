[gcode_macro _TOOL_DROPOFF]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set safe_y = tool.params_safe_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool['params_dock_' + tool.params_dock_type + '_path'] + [{'f':0.5}] + tool['params_changer_' + tool.params_changer_type + '_path'] %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}
  G90
  ; Move 1 mm up to avoid crashing into things
  G0 Z{ [cur_z+1.0, max_z]|min } F{fast}    
  #   ##############  Move up to the dock  ##############    
  ROUNDED_G0 Y={safe_y} D=20 F={fast}
  ROUNDED_G0 X={x} D=150 F={fast}
  #ROUNDED_G0 Z={z + path[0].get('z', 0)|float} D=20 F={fast}
  ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} D=0 F={fast}
  STOP_TOOL_PROBE_CRASH_DETECTION
  #  ############## Run the path ##############
  {% for pos in path %}
    #G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
  M106 S0 T{tn}


[gcode_macro _TOOL_PICKUP]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set close_y = tool.params_close_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool['params_dock_' + tool.params_dock_type + '_path'] + [{'f':0.5}] + tool['params_changer_' + tool.params_changer_type + '_path'] %}
  G90
  #   ##############  Fast to the last point  ##############
  ROUNDED_G0 Y={close_y} F={fast} D=5
  #ROUNDED_G0 X={x} Z={z + path[-1].get('z', 0)|float} F={fast} D=5
  ROUNDED_G0 X={x} F={fast} D=5
  ROUNDED_G0 Y={y + path[-1].get('y', 0)|float} X={x + path[-1].get('x', 0)|float} F={fast} D=0
  # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    
  {% if tool.extruder %}
    M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
  {% endif %}
  # Run the path in reverse
  {% for pos in path|reverse %}
    #G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) } 
    G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% if 'f' in pos %} # Use the f presence as marker that we have made contact with the tool.
      START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}
    {% endif %}
  {% endfor %}
  SET_STEPPER_ENABLE STEPPER={tool.extruder} ENABLE=1
  # Restore the position with smooth rounded move.
  ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
  {% if 'Z' in restore_position %}
    ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
  {% endif %}
  {% if 'X' in restore_position %}
    ROUNDED_G0 X={restore_position.X} F={fast} D=1000
  {% endif %}
  {% if 'Y' in restore_position %}
    ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
  {% endif %}
  ROUNDED_G0 D=0
  M106 S{printer["gcode_macro _TOOLCHANGER_VARS"].fan_speed} T{tn}
